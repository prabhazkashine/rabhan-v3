// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// REUSED ENUMS
// =============================================

enum UserRole {
  USER
  CONTRACTOR
  ADMIN
  SUPER_ADMIN
}

enum AuthProvider {
  EMAIL
  NAFATH
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  LOCKED
}

enum VerificationType {
  EMAIL
  PASSWORD_RESET
}

// =============================================
// PERMISSIONS & ROLES ENUMS
// =============================================

enum ResourceType {
  USERS
  CONTRACTORS
  QUOTATIONS
  PRODUCTS
}

enum PermissionAction {
  READ
  WRITE
  UPDATE
  DELETE
}


// =============================================
// ADMIN MODELS
// =============================================

model Admin {
  id           String   @id @default(uuid()) @db.Uuid
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)

  firstName    String   @map("first_name") @db.VarChar(100)
  lastName     String   @map("last_name") @db.VarChar(100)

  role         UserRole @default(ADMIN)
  status       UserStatus @default(ACTIVE)

  // Custom role assignment (optional, if null uses default role)
  customRoleId String? @map("custom_role_id") @db.Uuid

  emailVerified  Boolean   @default(true) @map("email_verified")
  loginAttempts  Int       @default(0) @map("login_attempts")
  lockedUntil    DateTime? @map("locked_until")
  lastLoginAt    DateTime? @map("last_login_at")

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  sessions            AdminSession[]
  passwordResetTokens AdminPasswordResetToken[]
  verificationTokens  AdminVerificationToken[]
  customRole          AdminRole? @relation(fields: [customRoleId], references: [id], onDelete: SetNull)

  @@map("admins")
}

model AdminSession {
  id           String   @id @default(uuid()) @db.Uuid
  adminId      String   @map("admin_id") @db.Uuid
  refreshToken String   @unique @map("refresh_token") @db.VarChar(500)
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")

  userAgent    String?  @map("user_agent")
  ipAddress    String?  @map("ip_address") @db.Inet

  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_sessions")
}

model AdminPasswordResetToken {
  id        String   @id @default(uuid()) @db.Uuid
  adminId   String   @map("admin_id") @db.Uuid
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_password_reset_tokens")
}

model AdminVerificationToken {
  id        String           @id @default(uuid()) @db.Uuid
  adminId   String           @map("admin_id") @db.Uuid
  type      VerificationType
  token     String           @unique @db.VarChar(255)
  expiresAt DateTime         @map("expires_at")
  createdAt DateTime         @default(now()) @map("created_at")

  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_verification_tokens")
}

// =============================================
// ROLES & PERMISSIONS MODELS
// =============================================

model AdminRole {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique @db.VarChar(100)
  description String?  @db.VarChar(500)
  isActive    Boolean  @default(true) @map("is_active")

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   String   @map("created_by") @db.Uuid

  // Relations
  permissions AdminRolePermission[]
  admins      Admin[]

  @@map("admin_roles")
}

model Permission {
  id          String         @id @default(uuid()) @db.Uuid
  resource    ResourceType
  action      PermissionAction
  description String?        @db.VarChar(255)

  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  rolePermissions AdminRolePermission[]

  // Ensure unique combination of resource + action
  @@unique([resource, action])
  @@map("permissions")
}

model AdminRolePermission {
  id           String @id @default(uuid()) @db.Uuid
  roleId       String @map("role_id") @db.Uuid
  permissionId String @map("permission_id") @db.Uuid

  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  role       AdminRole  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  // Ensure unique combination of role + permission
  @@unique([roleId, permissionId])
  @@map("admin_role_permissions")
}